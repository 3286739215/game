<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xmlns:context="http://www.springframework.org/schema/context"
               xmlns:aop="http://www.springframework.org/schema/aop"
               xmlns:tx="http://www.springframework.org/schema/tx"
               xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<!--spring配置文件 这里主要配置和业务逻辑有关 数据源 事务控制-->
<!--扫描注解-->
<context:component-scan base-package="org.game">
   <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>
<!--引入外部文件-->
   <context:property-placeholder location="classpath:dbconfig.properties" />
   <!--配置数据源 将dbconfig.properties放置在resources下-->
   <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
      <property name="driverClass" value="${jdbc.driverClass}"/>
      <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
      <property name="user" value="${jdbc.user}"/>
      <property name="password" value="${jdbc.password}"/>
   </bean>
   <!--=========配置和mybatis的整合 配置SqlSessionFactoryBean============-->
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="configLocation" value="classpath:mybatis-config.xml"/>
      <property name="dataSource" ref="pooledDataSource" />
      <property name="mapperLocations" value="classpath:mapper/*.xml"/>
   </bean>
   <!--配置扫描器,批量扫描接口生成接口的实现类,将mybatis接口的实现加入到ioc容器中-->
   <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      <property name="basePackage" value="org.game.dao" />
   </bean>
<!--   &lt;!&ndash;配置一个可以执行批量操作的sqlSession&ndash;&gt;
   <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
      <constructor-arg ref="sqlSessionFactory"/>
      <constructor-arg name="executorType" value="SIMPLE"/>
   </bean>-->
   <!--==========声明式事务控制==============-->
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
      <property name="dataSource" ref="pooledDataSource"/>
   </bean>

   <!--开启基于注解的事务,使用xml配置形式的事务(必要主要的都是使用配置式)-->
   <aop:config>
         <!--切入点表达式-->
      <aop:pointcut id="txPoint" expression="execution(* org.game.service..*(..))"/>
      <!--配置事务增强-->
      <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
   </aop:config>

   <!--配置事务增强,事务如何切入,定义的规则-->
   <tx:advice id="txAdvice" transaction-manager="transactionManager">
      <tx:attributes>
         <!--所有方法都是事务方法-->
         <tx:method name="*"/>
         <!--以get开始的所有方法 查询-->
         <tx:method name="get*" read-only="true"/>
      </tx:attributes>
   </tx:advice>
</beans>